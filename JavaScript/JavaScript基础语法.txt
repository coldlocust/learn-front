
1.javaScript中Object的valueOf在很多时候是默认调用的，比如
    var object=new object
    object.a=1
    console.log(object)  //{a:1}
    console.log(object.valueOf())  //{a:1}


2.javaScript中关于NaN的坑
    NaN (Not a Number)是一个特殊的数值-表示一个本应返回数值的操作数未返回数值的情况（这样就不会抛出错误了）
    特点：1.任何涉及到NaN的操作都会返回NaN，比如NaN/10
          2. console.log(NaN===NaN)  //false


3.JavaScript为什么会有undefined,undefined的意义
    var message
    alert(message===undefined)  //true
    alert(age)  //产生错误，age没有声明，
    alert(typeof age)  //"undefined"
    可以直接给变量赋值undefinend,但是尽量避免这样做


4.JavaScript中的Number类型采用IEE754标准指定，所以有精度误差，注意
    a=0.1
    b=0.2
    console.log(a+b)  //0.30000000000000004
    console.log((a+b)===0.3)  //false


5.javaScript中&,&&,|,||,~,^的使用场景
    下面案例介绍的为有操作数不为Boolean值的情况，逻辑&&和逻辑||操作的定义

    var result=a||b  
        //如果第一个操作数为对象，返回第一个操作数
        //如果第一个操作数计算结果为负数，返回第二个操作数
        //如果两个操作数都是对象，返回第一个操作数
        //如果两个操作数都是null,NaN,undefined,返回null,NaN,undefined

    var result=a&&b  
        //如果第一个操作数是对象，返回第二个操作数
        //如果第二个操作数是对象，则只有在第一个操作数的求值结果为true的情况下才返回该对象
        //如果两个操作数都是对象，返回第二个操作数
        //如果有一个操作数是null,NaN,undefined,返回null,NaN,undefined


6.相等操作符
    1.相等(==)和不相等(!=)
        特点：先转换操作数(强制转换)，再比较他们的相等性
    2.全等(===)和不全等(!==),推荐使用
        特点：如果类型不匹配直接返回false,如果类型匹配再比较他们的相等性


7.逗号操作符
    使用逗号操作符可以在一条语句中执行多个操作
    1.声明多个变量
      var num1=1,num2=2,num3=3
    2.用于赋值，赋值时逗号操作符总会返回最表达式的最后一项
      var num={5,4,2,2,0}  //num的值为0


8.确定某个对象的类型，比如数组(Array),通过instanceof操作符得到结果
    var value=new Array()
    console.log(value instanceof Array)  //true

9.javaScript中的const
    1.const声明的变量不可更改，但是仅表示变量的地址不可更改，保证那个地址里的数据不变
    const obj={a:1,b:2}  
    obj={c:3}  // Uncaught TypeError: Assignment to constant variable.
    delete obj.a
    console.log(obj) //{b:2}